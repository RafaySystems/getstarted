apiVersion: infra.k8smgmt.io/v3
kind: Cluster
metadata:
  # The name of the cluster
  name: karpenter-cluster
  # The name of the project the cluster will be created in
  project: defaultproject
spec:
  blueprintConfig:
    # The name of the blueprint the cluster will use
    name: minimal
    # The version of the blueprint the cluster will use
    version: latest
  # The name of the cloud credential that will be used to create the cluster  
  cloudCredentials: aws-cloud-credential
  config:
    # The EKS addons that will be applied to the cluster
    addons:
    - name: kube-proxy
      version: latest
    - name: vpc-cni
      version: latest
    - name: coredns
      version: latest
    iam:
      # Enables the IAM OIDC provider as well as IRSA for the Amazon CNI plugin
      withOIDC: true
      # Create a service account with the below IAM policy
      serviceAccounts:
      - attachPolicy:
          Statement:
          - Action:
            # Write Operations
            - "ec2:CreateLaunchTemplate"
            - "ec2:CreateFleet"
            - "ec2:RunInstances"
            - "ec2:CreateTags"
            - "iam:PassRole"
            - "ec2:TerminateInstances"
            # Read Operations
            - "ec2:DescribeLaunchTemplates"
            - "ec2:DescribeInstances"
            - "ec2:DescribeSecurityGroups"
            - "ec2:DescribeSubnets"
            - "ec2:DescribeInstanceTypes"
            - "ec2:DescribeInstanceTypeOfferings"
            - "ec2:DescribeAvailabilityZones"
            - "ssm:GetParameter"
            - "eks:DescribeCluster"
            Effect: Allow
            Resource: "*"
          Version: "2012-10-17"
        metadata:
          # The name of the service account
          name: karpenter
          # The name of the namespace where the service account will be created
          namespace: karpenter  
    identityMappings:
      arns:
      - arn: "arn:aws:iam::<ACCOUNT-NUMBER>:role/KarpenterNodeRole-Rafay"
        username: system:node:{{EC2PrivateDNSName}}
        group:
        - system:bootstrappers
        - system:nodes	  
    managedNodeGroups:
      # The AWS AMI family type the nodes will use
    - amiFamily: AmazonLinux2 # This node group will be used for worker nodes
      # The desired number of nodes that can run in the node group   
      desiredCapacity: 2
      # The AWS EC2 instance types that will be used for the nodes
      instanceTypes:
      - t3.medium
      - t3.large
      # The maximum number of nodes that can run in the node group
      maxSize: 4
      # The minimum number of nodes that can run in the node group
      minSize: 2
      # The name of the node group that will be created in AWS
      name: managed-spot
      # Enable Spot instances to be used for the node group
      spot: true
      # The AWS AMI family type the nodes will use
    - amiFamily: AmazonLinux2  # This node group will be used for the system resources
      # The desired number of nodes that can run in the node group  
      desiredCapacity: 1
      # The AWS EC2 instance type that will be used for the nodes
      instanceType: t3.large
      # The labels applied to the nodes in the node group
      labels:
        nodes: system
      # The maximum number of nodes that can run in the node group
      maxSize: 2
      # The minimum number of nodes that can run in the node group
      minSize: 1
      # The name of the node group that will be created in AWS
      name: managed-system
      # Apply taints to the node group to allow only system resources to be scheduled on these nodes
      taints:
      - effect: NoSchedule
        key: components
        value: system
    metadata:
      # The name of the cluster
      name: karpenter-cluster
      # The AWS region the cluster will be created in
      region: us-west-2
      # The tags that will be applied to the AWS cluster resources
      tags:
        'cluster-name': 'karpenter-cluster'
        email: user@rafay.co
        env: qa
      # The Kubernetes version that will be installed on the cluster  
      version: latest
    vpc:
      # AutoAllocateIPV6 requests an IPv6 CIDR block with /56 prefix for the VPC
      autoAllocateIPv6: false
      clusterEndpoints:
        # Enables private access to the Kubernetes API server endpoints
        privateAccess: true
        # Enables public access to the Kubernetes API server endpoints
        publicAccess: false
      # The CIDR that will be used  by the cluster VPC
      cidr: 192.168.0.0/16
  # Configure the scheduler to only place system resources on the managed-system node group    
  systemComponentsPlacement:
    nodeSelector:
      nodes: system
    tolerations:
    - effect: NoSchedule
      key: components
      operator: Equal
      value: system
  type: aws-eks
